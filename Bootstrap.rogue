#$ LIBRARIES(macOS) = brew
#$ LIBRARIES(macOS) = python3
#$ LIBRARIES(Linux) = python3 python3-pip(which:pip3)

Dependencies.check

local args = System.command_line_arguments
if (args.is_empty)
  Bootstrap.install
else
  local cmd = args.join( " " )
  if (cmd == "install update")
    # Current folder is ProjectName/
    # This is being run from ProjectName/Plasmacore/
    Bootstrap.sync( "*", &exclude=@["LICENSE","README.md"], &keep_unused )
    Bootstrap.sync( "Libraries/Box2D/**" )
    Bootstrap.sync( "Libraries/ImageIO/**" )
    Bootstrap.sync( "Libraries/Plasmacore/**" )
    Bootstrap.sync( "Libraries/Rogue/AssetCompiler/**" )
    Bootstrap.sync( "Libraries/Rogue/Plasmacore/**" )

    if (not File.exists("Project.depz"))
      File.save( "Project.depz",
        @|[REPO Plasmacore]
         |prefix=https://github.com/AbePralle
         |checkout=master
         |default_actions=--init --update --ff --outdated
      )
    endIf
    run "depz"
  else
    println "Invalid option: " + cmd
    System.exit 1
  endIf
endIf

class Bootstrap [singleton]
  PROPERTIES
    REPO   = "https://github.com/AbePralle/Plasmacore.git"
    BRANCH = "master"

  METHODS
    method init
      configure

    method configure
      # Read override values from Local.mk
      if (File.exists("Local.mk"))
        local printed_header = false
        forEach (line in LineReader(File("Local.mk")))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            local p = type_info.find_property( name )
            if (p)
              if (not printed_header)
                printed_header = true
                println "Local.mk overrides:"
              endIf
              println "$ = $" (name,value)
              type_info.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method install
      # Don't overwrite existing installation
      if (File.exists("Source") or File.exists("Platforms"))
        println "Plasmacore is already installed. Use 'rogo update' to update it."
        return
      endIf

      if (not File.exists("Project.depz"))
        local depz =
          @|[REPO Plasmacore]
           |prefix=https://github.com/AbePralle
           |checkout=BRANCH
           |default_actions=--init --update --ff --outdated
        depz = depz.replacing( "BRANCH", BRANCH )
        File.save( "Project.depz", depz )
      endIf
      if (not File.exists("Plasmacore")) run "depz"

      local files = Files( "Plasmacore", "**" )
      if (File.exists("README.md")) files.remove( "Plasmacore/README.md" )
      File.sync_from( files, ".", &keep_unused, &verbose )

      if (not File.exists(".gitignore"))
        println "Creating default .gitignore"
        File.save( ".gitignore", default_gitignore )
      endIf

      System.run @|rogo version Installed

    method sync( pattern:String, exclude=UndefinedValue:Value, &keep_unused )
      local update_folder = "Plasmacore/"
      if (not File.is_folder(update_folder)) update_folder = "Build/Update/Plasmacore/" # pre-depz update
      local source_folder = update_folder
      local dest_folder = "."
      if (pattern != "*")
        dest_folder = pattern.before_last( '/' )
        source_folder += dest_folder
        pattern = pattern.after_last( '/' )
      endIf
      local files = Files( source_folder, pattern )
      if (exclude.count)
        files.remove( update_folder + (forEach in exclude) )
      endIf
      File.sync_from( files, dest_folder, &=keep_unused, &verbose )
endClass

routine run( cmd:String, &silent )
  forEach (line in LineReader(cmd))
    if (not silent) print( "> " ).println( line )
    if (0 != System.run(line)) throw Error( "Build error." )
  endForEach
endRoutine

class Dependencies [singleton]
  METHODS
    method check
      require_depz

    method exists( command:String )->Logical
      return (Process.run("which "+command,&inherit_environment).success)

    method require_depz
      if (Process.run("depz -h",&inherit_environment).success) return  # already installed
      require_pip3
      run @|pip3 install --user git+https://github.com/MurphyMc/depz.git

    method require_pip3
      if (not exists("pip3")) throw Error( "Please install pip3 and then re-run the command." )
endClass

routine default_gitignore->String
  return @|BuildLocal.rogue
          |Plasmacore
          |
          |# Vim
          |*.swp
          |*.local
          |
          |# Android
          |**/src/main/assets
          |
          |Test
          |Update.mk
          |Publish.mk
          |**/Local.mk
          |**/Build/
          |.rogo
          |
          |# Merge/Patch/etc.
          |*.orig
          |*.rej
          |*.diff
          |*.patch
          |
          |# Mac
          |.DS_Store
          |
          |# Xcode
          |#
          |build/
          |*.pbxuser
          |!default.pbxuser
          |*.mode1v3
          |!default.mode1v3
          |*.mode2v3
          |!default.mode2v3
          |*.perspectivev3
          |!default.perspectivev3
          |xcuserdata
          |*.xccheckout
          |*.moved-aside
          |DerivedData
          |*.hmap
          |*.ipa
          |*.xcuserstate
endRoutine

