module Plasmacore


class ScreenState
  GLOBAL METHODS
    method operator+( a:ScreenState, b:ScreenState )->ScreenState
      if (not a) return b
      if (not b) return a
      a.queue_state( b )
      return a

  PROPERTIES
    screen                : Screen

    is_active             : Logical
    needs_first_update    = true
    previous_display_size : XY?

    next_state            : ScreenState
    prior_state           : ScreenState

    actions : Action

  METHODS
    method init( screen=null )

    method after( e:KeyEvent )

    method after( e:PointerEvent )

    method after( e:ScrollEvent )

    method after( e:TextEvent )

    method after_draw

    method after_resize

    method after_update

    method change_state( new_state:ScreenState )->ScreenState
      return screen.change_state( new_state )

    method change_screen( new_screen:Screen )->Screen
      return screen.change_screen( new_screen )

    method exit_state
      screen.exit_state

    method handle( e:KeyEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:PointerEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:ScrollEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle( e:TextEvent )
      on( e )
      if (e.is_consumed) return

      screen.handle( e )
      if (e.is_consumed) return

      after( e )

    method handle_draw
      on_draw
      screen.handle_draw
      after_draw

    method handle_resize
      on_resize

      local cur_screen = screen
      if (not cur_screen.previous_display_size.exists or cur_screen.previous_display_size.value != Display.size)
        cur_screen.handle_resize
        cur_screen.previous_display_size = Display.size
      endIf

      after_resize

    method handle_update
      if (actions) actions = actions.update
      on_update

      screen.needs_first_update = false
      screen.handle_update

      after_update

    method load_another_asset->Real64
      return screen.load_another_asset

    method load_assets
      screen.load_assets

    method on( e:KeyEvent )
      noAction

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on( e:TextEvent )
      noAction

    method on_draw
      noAction

    method on_finish
      noAction

    method on_prepare
      noAction

    method on_resize
      noAction

    method on_resume
      noAction

    method on_start
      noAction

    method on_suspend
      noAction

    method on_update
      noAction

    method push_state( new_state:ScreenState )
      screen.push_state( new_state )

    method queue_state( new_state:ScreenState, &insert )
      if (not new_state.screen) new_state.screen = screen

      if (insert)
        if (next_state) new_state.queue_state( next_state )
        next_state = new_state
      else
        local cur = this
        while (cur.next_state) cur = cur.next_state
        cur.next_state = new_state
      endIf

    method set_screen( @screen )->this
      return this

endClass

class ScreenState<<$ScreenType>> : ScreenState
  METHODS
    method screen->$ScreenType
      return @screen as $ScreenType
endClass

class ChangeScreenState( new_screen:Screen ) : ScreenState
  METHODS
    method on_start
      change_screen( new_screen )
endClass

class ExecuteState( fn:Function ) : ScreenState
  METHODS
    method on_start
      fn()
      exit_state
endClass

class FadeInState : ScreenState
  PROPERTIES
    color   : Color
    opacity : EasedValue<<Real64>>

  METHODS
    method init( duration=0.25:Real64, color=Color.BLACK, progress_fn=ProgressFn.QUADRATIC_IN:ProgressFnType )
      opacity = EasedValue<<Real64>>( 1.0, duration, progress_fn )

    method on_start
      opacity.target_value = 0.0

    method after_draw
      Display.bounds.fill( color.with_alpha(opacity.value) )
      if (opacity.value == 0.0) exit_state
endClass

class FadeOutState : ScreenState
  PROPERTIES
    color   : Color
    opacity : EasedValue<<Real64>>

  METHODS
    method init( duration=0.25:Real64, color=Color.BLACK, progress_fn=ProgressFn.QUADRATIC_OUT:ProgressFnType )
      opacity = EasedValue<<Real64>>( 0.0, duration, progress_fn )

    method on_start
      opacity.target_value = 1.0

    method after_draw
      Display.bounds.fill( color.with_alpha(opacity.value) )
      if (opacity.value == 1.0) exit_state
endClass

